import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
from juego import Juego

from juego import Juego

def enviar_numero(juego, raiz, entrada_texto, mensaje_etiqueta, resultado_etiqueta, ranking_tabla):
    # Funci√≥n llamada al hacer clic en el bot√≥n "Adivinar". Realiza un intento y actualiza la interfaz.
    entrada = entrada_texto.get()
    entrada_texto.delete(0, tk.END)
    reiniciar = juego.jugar(entrada, mensaje_etiqueta, resultado_etiqueta, ranking_tabla, raiz)
    if reiniciar:
        nueva_partida(juego, resultado_etiqueta, mensaje_etiqueta, ranking_tabla)

def nueva_partida(juego, resultado_etiqueta, mensaje_etiqueta, ranking_tabla):
    # Inicia una nueva partida, reiniciando el juego y limpiando la interfaz.
    juego.reiniciar_juego()
    resultado_etiqueta.config(text="")
    mensaje_etiqueta.config(text="")
    ranking_tabla.delete(*ranking_tabla.get_children())

    
def mostrar_reglas():
    # Muestra un cuadro de di√°logo con las reglas del juego "Muertos y Heridos".
    reglas = """
El dispositivo piensa un n√∫mero de tres o cuatro cifras (lo puedes cambiar en opciones).
T√∫ tienes que encontrarlo. Cada vez que dices un n√∫mero el dispositivo te contesta cu√°ntos muertos y cu√°ntos heridos tiene tu intento.

Un ejemplo: t√∫ escribes 1234. El dispositivo lo compara con el n√∫mero oculto, el n√∫mero que t√∫ no conoces y tienes que adivinar, supongamos que es 1249. Entonces te contesta que hay 2 muertos y 1 herido. Los muertos son 1 y 2. El herido es el 4. Pero esto t√∫ no lo sabes. Solo sabes que tu n√∫mero tiene 2 cifras bien colocadas y una m√°s que no est√° en su sitio. Tambi√©n sabes que una de tus cifras no est√° en el n√∫mero oculto. Ahora haz otro intento.

Se considera que adivinar el n√∫mero en 8 intentos es una buena marca. La mayor√≠a de la gente necesita 10 o m√°s intentos.
    """
    messagebox.showinfo("Las reglas abreviadas üíÄ", reglas)

def Historia():
    # Muestra un cuadro de di√°logo con la historia del juego "Muertos y Heridos".
    historia = """
El juego de los muertos y los heridos es un juego de deducci√≥n l√≥gica para dos o m√°s jugadores que tradicionalmente se ha jugado usando l√°piz y papel. Tambi√©n es llamado Picas y Fijas o Punto y Fama. Tambi√©n hay una antigua versi√≥n de escritorio llamada 4digits..

Me ense√±aron este juego con el nombre de "juego de los Muertos y los Heridos" de peque√±o y jugu√© con mi primo √Ålvaro incontables veces. Me encantaba, aunque tambi√©n es verdad que no ten√≠amos mucho m√°s que hacer. En aquella √©poca exist√≠a una cosa que se llamaba "tarde interminable en el campo". En cambio no exist√≠an m√≥viles.
    """
    messagebox.showinfo("Picas y Fijas o Punto y Fama. üíÄ", historia)


def crear_interfaz(raiz):
    # Crea la interfaz de usuario, incluyendo botones, etiquetas y la tabla de ranking.

    def guardar_registro_partida():
        # Abre un cuadro de di√°logo para guardar un archivo de registro de la partida.
        archivo = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Archivos de texto", "*.txt")])

        if archivo:
            try:
                with open(archivo, 'w') as f:
                    for intento in juego.intentos:
                        f.write(f"Intento: {intento[0]}, N√∫mero: {intento[1]}, Muertos: {intento[2]}, Heridos: {intento[3]}\n")
            except Exception as e:
                mensaje_etiqueta.config(text=f"Error al guardar el archivo: {str(e)}")
            else:
                mensaje_etiqueta.config(text=f"Registro de partida guardado en {archivo}")


    raiz.title("Muertos y Heridos")
    raiz.configure(bg='lightblue')

    marco = tk.Frame(raiz, bg='lightblue')
    marco.pack(pady=5)

    botones_historia_reglas = tk.Frame(marco, bg='lightblue')
    botones_historia_reglas.pack(pady=5)

    boton_historia = tk.Button(botones_historia_reglas, text="Historia", command=Historia)
    boton_historia.pack(side="left", padx=5)

    boton_reglas = tk.Button(botones_historia_reglas, text="Mostrar Reglas", command=mostrar_reglas)
    boton_reglas.pack(side="left", padx=5)

    entrada_texto = tk.Entry(marco)
    entrada_texto.pack(pady=5)
    
    def bloquear_entrada(event):
        # Mientras se presionan los atajos, bloquea la entrada de texto.
        if event.char == event.keysym and event.keysym not in ("Return", "r", "R", "h", "H", "n", "N"):
            entrada_texto.config(state="normal")
        else:
            entrada_texto.config(state="disabled")

    def desbloquear_entrada(event):
        # Desbloquea la entrada de texto cuando se deja de presionar un atajo.
        entrada_texto.config(state="normal")

    # Configuraci√≥n de los bortones.
    boton_adivinar = tk.Button(marco, text="Adivinar", command=lambda: enviar_numero(juego, raiz, entrada_texto, mensaje_etiqueta, resultado_etiqueta, ranking_tabla))
    boton_adivinar.pack(pady=5)

    boton_nueva_partida = tk.Button(marco, text="Nueva Partida", command=lambda: nueva_partida(juego, resultado_etiqueta, mensaje_etiqueta, ranking_tabla))
    boton_nueva_partida.pack(pady=5)

    mensaje_etiqueta = tk.Label(raiz, text="", fg="red", bg='lightblue')
    mensaje_etiqueta.pack()

    resultado_etiqueta = tk.Label(raiz, text="", bg='lightblue')
    resultado_etiqueta.pack()

    # Configuraci√≥n de la tabla de ranking.
    ranking_tabla = ttk.Treeview(raiz, columns=("Intento", "N√∫mero", "Muertos", "Heridos"), show="headings", height=14)
    ranking_tabla.heading("Intento", text="#")
    ranking_tabla.heading("N√∫mero", text="N√∫mero")
    ranking_tabla.heading("Muertos", text="Muertos")
    ranking_tabla.heading("Heridos", text="Heridos")
    ranking_tabla.column("Intento", anchor="center", width=60)
    ranking_tabla.column("N√∫mero", anchor="center", width=80)
    ranking_tabla.column("Muertos", anchor="center", width=130)
    ranking_tabla.column("Heridos", anchor="center", width=130)
    ranking_tabla.pack()

    juego = Juego()

    # Configuraci√≥n de los atajos.
    raiz.bind("<Return>", lambda event=None: boton_adivinar.invoke())
    raiz.bind("r", lambda event=None: boton_reglas.invoke())
    raiz.bind("R", lambda event=None: boton_reglas.invoke())
    raiz.bind("h", lambda event=None: boton_historia.invoke())
    raiz.bind("H", lambda event=None: boton_historia.invoke())
    raiz.bind("n", lambda event=None: boton_nueva_partida.invoke())
    raiz.bind("N", lambda event=None: boton_nueva_partida.invoke())

    raiz.bind("<Key>", bloquear_entrada)
    raiz.bind("<KeyRelease>", desbloquear_entrada)

    # Configuraci√≥n de la ventana.
    raiz.resizable(width=False, height=False)

    menubar = tk.Menu(raiz)
    raiz.config(menu=menubar)
    
    juego_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Juego", menu=juego_menu)
    juego_menu.add_command(label="Guardar Registro de Partida", command=guardar_registro_partida)
    juego_menu.add_separator()
    juego_menu.add_command(label="Salir", command=raiz.quit)
    
if __name__ == "__main__":
    raiz = tk.Tk()
    crear_interfaz(raiz)
    raiz.mainloop()
